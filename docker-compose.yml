version: '3.8'

services:
  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logodeth-api
    ports:
      - "8000:8000"
    environment:
      # Core API Keys
      - LOGODETH_OPENAI_API_KEY=${LOGODETH_OPENAI_API_KEY}
      - LOGODETH_ANTHROPIC_API_KEY=${LOGODETH_ANTHROPIC_API_KEY:-}
      
      # Environment
      - LOGODETH_ENVIRONMENT=${LOGODETH_ENVIRONMENT:-production}
      - LOGODETH_DEBUG=${LOGODETH_DEBUG:-false}
      
      # Redis Configuration
      - LOGODETH_REDIS_URL=redis://redis:6379
      - LOGODETH_REDIS_PASSWORD=${LOGODETH_REDIS_PASSWORD:-}
      - LOGODETH_CACHE_TTL=${LOGODETH_CACHE_TTL:-86400}
      - LOGODETH_CACHE_MAX_KEYS=${LOGODETH_CACHE_MAX_KEYS:-10000}
      
      # API Configuration
      - LOGODETH_HOST=0.0.0.0
      - LOGODETH_PORT=8000
      - LOGODETH_API_RATE_LIMIT=${LOGODETH_API_RATE_LIMIT:-10}
      - LOGODETH_MAX_FILE_SIZE=${LOGODETH_MAX_FILE_SIZE:-10485760}
      
      # AI Configuration
      - LOGODETH_OPENAI_MODEL=${LOGODETH_OPENAI_MODEL:-gpt-4o}
      - LOGODETH_ANTHROPIC_MODEL=${LOGODETH_ANTHROPIC_MODEL:-claude-3-5-sonnet-20241022}
      - LOGODETH_MAX_TOKENS=${LOGODETH_MAX_TOKENS:-300}
      - LOGODETH_TEMPERATURE=${LOGODETH_TEMPERATURE:-0.1}
      - LOGODETH_AI_TIMEOUT=${LOGODETH_AI_TIMEOUT:-60}
      
      # Logging
      - LOGODETH_LOG_LEVEL=${LOGODETH_LOG_LEVEL:-INFO}
      - LOGODETH_LOG_FORMAT=${LOGODETH_LOG_FORMAT:-json}
      
      # CORS
      - LOGODETH_CORS_ORIGINS=${LOGODETH_CORS_ORIGINS:-http://localhost:8000,http://localhost:3000}
      
      # Optional Monitoring
      - LOGODETH_SENTRY_DSN=${LOGODETH_SENTRY_DSN:-}
      - LOGODETH_POSTHOG_API_KEY=${LOGODETH_POSTHOG_API_KEY:-}
      
      # Security
      - LOGODETH_SECRET_KEY=${LOGODETH_SECRET_KEY}
    depends_on:
      - redis
    volumes:
      - ./backend:/app/backend:ro  # Backend code (read-only in production)
      - /app/logs  # Logs volume
      - /tmp/logodeth-uploads  # Temporary upload directory
    networks:
      - logodeth-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: logodeth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    command: >
      redis-server /etc/redis/redis.conf
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      - REDIS_PASSWORD=${LOGODETH_REDIS_PASSWORD:-}
    networks:
      - logodeth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    sysctls:
      - net.core.somaxconn=65535

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: logodeth-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - logodeth-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

networks:
  logodeth-network:
    driver: bridge