# Production Docker Compose Configuration
version: '3.8'

services:
  # Production API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    container_name: logodeth-api-prod
    ports:
      - "8000:8000"
    environment:
      # Core Configuration
      - LOGODETH_ENVIRONMENT=production
      - LOGODETH_DEBUG=false
      - LOGODETH_LOG_LEVEL=INFO
      - LOGODETH_LOG_FORMAT=json
      
      # API Keys (from environment)
      - LOGODETH_OPENAI_API_KEY=${LOGODETH_OPENAI_API_KEY}
      - LOGODETH_ANTHROPIC_API_KEY=${LOGODETH_ANTHROPIC_API_KEY:-}
      
      # Redis
      - LOGODETH_REDIS_URL=redis://redis:6379
      - LOGODETH_REDIS_PASSWORD=${LOGODETH_REDIS_PASSWORD:-}
      - LOGODETH_CACHE_TTL=${LOGODETH_CACHE_TTL:-86400}
      - LOGODETH_CACHE_MAX_KEYS=${LOGODETH_CACHE_MAX_KEYS:-50000}
      
      # API Settings
      - LOGODETH_HOST=0.0.0.0
      - LOGODETH_PORT=8000
      - LOGODETH_API_RATE_LIMIT=${LOGODETH_API_RATE_LIMIT:-50}
      - LOGODETH_MAX_FILE_SIZE=${LOGODETH_MAX_FILE_SIZE:-10485760}
      
      # AI Configuration
      - LOGODETH_OPENAI_MODEL=${LOGODETH_OPENAI_MODEL:-gpt-4o}
      - LOGODETH_ANTHROPIC_MODEL=${LOGODETH_ANTHROPIC_MODEL:-claude-3-5-sonnet-20241022}
      - LOGODETH_MAX_TOKENS=${LOGODETH_MAX_TOKENS:-300}
      - LOGODETH_TEMPERATURE=${LOGODETH_TEMPERATURE:-0.1}
      - LOGODETH_AI_TIMEOUT=${LOGODETH_AI_TIMEOUT:-60}
      
      # CORS (production domains)
      - LOGODETH_CORS_ORIGINS=${LOGODETH_CORS_ORIGINS:-https://yourdomain.com,https://api.yourdomain.com}
      
      # Monitoring
      - LOGODETH_SENTRY_DSN=${LOGODETH_SENTRY_DSN:-}
      - LOGODETH_POSTHOG_API_KEY=${LOGODETH_POSTHOG_API_KEY:-}
      
      # Security
      - LOGODETH_SECRET_KEY=${LOGODETH_SECRET_KEY}
      
      # Worker Configuration
      - LOGODETH_WORKER_COUNT=${LOGODETH_WORKER_COUNT:-4}
      - LOGODETH_WORKER_TIMEOUT=${LOGODETH_WORKER_TIMEOUT:-300}
    
    depends_on:
      redis:
        condition: service_healthy
    
    volumes:
      # Read-only code
      - ./backend:/app/backend:ro
      # Persistent logs
      - ./logs:/app/logs
      # Temporary uploads (tmpfs for security)
      - type: tmpfs
        target: /app/uploads
        tmpfs:
          size: 1G
          mode: 1777
    
    networks:
      - logodeth-network
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,size=100M,mode=1777

  # Production Redis
  redis:
    image: redis:7-alpine
    container_name: logodeth-redis-prod
    command: ["redis-server", "/etc/redis/redis.conf"]
    
    environment:
      - REDIS_PASSWORD=${LOGODETH_REDIS_PASSWORD:-}
    
    volumes:
      - ./redis.conf:/etc/redis/redis.conf:ro
      - redis_data_prod:/data
    
    networks:
      - logodeth-network
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # No external port exposure in production
    expose:
      - "6379"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: logodeth-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    depends_on:
      api:
        condition: service_healthy
    
    networks:
      - logodeth-network
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Log Aggregator (Optional)
  fluentd:
    image: fluentd:v1.16-1
    container_name: logodeth-logs
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/app/logs:ro
    networks:
      - logodeth-network
    restart: unless-stopped
    profiles:
      - monitoring

# Production Volumes
volumes:
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis-prod

# Secure Network
networks:
  logodeth-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16